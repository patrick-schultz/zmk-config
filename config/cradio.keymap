#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH1 LH0 RH0 RH1

#define XXX &none
#define ___ &trans

/* Global settings */

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define LAYER_TAPPING_TERM 200
#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Layers */

#define COLEMAK 0
#define NUM 1
#define EXT 2
#define SYM 3
#define FN 4

// activate FN layer by activating both EXT and SYM
ZMK_CONDITIONAL_LAYER(EXT SYM, FN)

/* Homerow mods */

ZMK_BEHAVIOR(hm_l, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  global-quick-tap-ms = <150>;
  hold-trigger-key-positions = <KEYS_R KEYS_T>;
  hold-trigger-on-release; // delay positional check until key-release
  bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(hm_r, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  global-quick-tap-ms = <150>;
  hold-trigger-key-positions = <KEYS_L KEYS_T>;
  hold-trigger-on-release; // delay positional check until key-release
  bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(hm_shift_l, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM_FAST>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  hold-trigger-key-positions = <KEYS_R KEYS_T>;
  bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(hm_shift_r, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM_FAST>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  hold-trigger-key-positions = <KEYS_L KEYS_T>;
  bindings = <&kp>, <&kp>;
)

#define HRML(k1,k2,k3,k4) &hm_l LCTRL k1  &hm_l LALT k2  &hm_l LCMD k3  &hm_shift_l LSHFT k4
#define HRMR(k1,k2,k3,k4) &hm_shift_r RSHFT k1  &hm_r RCMD k2  &hm_r RALT k3  &hm_r RCTRL k4

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1441
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

// Alt+Tab swapper
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
    ignored-key-positions = <LT2>;
)

/* Combos */

#undef COMBO_TERM
#define COMBO_TERM 40
ZMK_COMBO(combo_bspc, &kp BSPC, RT1 RT2, ALL)
ZMK_COMBO(combo_esc, &kp ESC, LT1 LT2, ALL)
ZMK_COMBO(combo_capsword, &caps_word, LM1 RM1, ALL)

/* Mod morphs */

ZMK_BEHAVIOR(com_semi, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&typeSemi>;
)
ZMK_BEHAVIOR(typeSemi, macro,
    bindings = <&macro_release &kp LSHFT>
            , <&macro_tap &kp SEMICOLON>
            ;
)

ZMK_BEHAVIOR(dot_col, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)

ZMK_BEHAVIOR(qexl, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp QMARK>, <&kp EXCL>;
)

ZMK_BEHAVIOR(dunder, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp MINUS>, <&kp UNDER>;
)

// keymap

ZMK_LAYER(default_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp Q      &kp W      &kp F      &kp P     &lt NUM B       &kp J      &kp L      &kp U      &kp Y      &kp SQT
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    HRML(A,        R,         S,         T)     &kp G          &kp M      HRMR(N,        E,         I,        O)
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp Z      &kp X      &kp C      &kp D      &kp V          &kp K      &kp H     &com_semi   &dot_col   &dunder
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                   &smart_shft  &mo EXT      &lt SYM SPACE SMART_NUM 
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(num_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    XXX        XXX        XXX        XXX        XXX            &kp EQUAL  &kp N7     &kp N8     &kp N9     XXX  
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LCTRL  &kp LALT   &kp LCMD   &kp LSHFT &sys_reset      &kp STAR   &kp N4     &kp N5     &kp N6     &kp PLUS
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    XXX        XXX        &kp TAB    &kp BSPC   XXX            &kp FSLH   &kp N1     &kp N2     &kp N3     &kp MINUS
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___            ___        &kp N0
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(ext_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    XXX        XXX      &kp LS(TAB)  &swapper   XXX            &kp PG_UP  &kp HOME   &kp UP     &kp END    XXX 
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LCTRL  &kp LALT   &kp LCMD   &kp LSHFT  XXX            &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &kp DEL
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  XXX            &none      &kp BSPC   &kp TAB    XXX        XXX 
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___          &lt SYM RET &kp K_CANCEL   
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(sym_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp GRAVE   &kp LT     &kp GT    &kp CARET  &none          &kp AMPS   &kp DLLR   &kp LBKT   &kp RBKT  &kp PRCNT
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp EXCL  &kp MINUS   &kp PLUS  &kp EQUAL   &kp HASH       &kp PIPE  &kp COLON   &kp LPAR   &kp RPAR  &kp QMARK
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp BSLH   &kp FSLH   &kp STAR  &kp UNDER   XXX           &kp TILDE   &kp SEMI   &kp LBRC   &kp RBRC   &kp AT
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___            ___        ___   
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(fn_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    XXX       &kp C_PREV  &kp C_PP  &kp C_NEXT &bootloader    &bootloader &kp F7     &kp F8     &kp F9     &kp F12
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LCTRL  &kp LALT   &kp LCMD   &kp LSHFT &sys_reset     &sys_reset  &kp F4     &kp F5     &kp F6     &kp F11
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    XXX      &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP XXX          XXX        &kp F1     &kp F2     &kp F3     &kp F10
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___            ___        ___   
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)