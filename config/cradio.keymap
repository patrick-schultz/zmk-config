#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH1 LH0 RH0 RH1

#define XXX &none
#define ___ &trans

/* Global settings */

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define LAYER_TAPPING_TERM 200
#define AK_TAPPING_TERM 40
#define LK_TAPPING_TERM 200
#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Layers */

#define ALPHA 0
#define l_akG 1
#define l_akM 2
#define l_akA 3
#define l_akU 4
#define l_akE 5
#define l_akO 6
#define NUM 7
#define EXT 8
#define SYM 9
#define FN 10

// activate FN layer by activating both EXT and SYM
ZMK_CONDITIONAL_LAYER(EXT SYM, FN)

/* Homerow mods */

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <HM_TAPPING_TERM>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R KEYS_T)
MAKE_HRM(hmr, &kp, &kp, KEYS_L KEYS_T)

ZMK_BEHAVIOR(hm_shift_l, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM_FAST>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  hold-trigger-key-positions = <KEYS_R KEYS_T>;
  bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(hm_shift_r, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM_FAST>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  hold-trigger-key-positions = <KEYS_L KEYS_T>;
  bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(hrm_a, hold_tap,
  flavor = "balanced";
  tapping-term-ms = <HM_TAPPING_TERM_FAST>;
  quick-tap-ms = <QUICK_TAP_MS>; // repeat on tap-hold
  hold-trigger-key-positions = <KEYS_L KEYS_T>;
  bindings = <&kp>, <&ak_A>;
)
MAKE_HRM(hrm_e, &kp, &ak_E, KEYS_L KEYS_T)

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1441
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

// Alt+Tab swapper
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
    ignored-key-positions = <LT2>;
)

/* Combos */

#undef COMBO_TERM
#define COMBO_TERM 40
#define COMBO_TERM_FAST 30
#define COMBO_TERM_SLOW 40
#define ALPHA_ALL ALPHA l_akA l_akE l_akO l_akU

ZMK_COMBO(combo_qu, &lk_qu Q Q, LT3 LT1, ALPHA_ALL, 70)
ZMK_COMBO(combo_z, &kp Z, LT4 LT3, ALPHA_ALL, COMBO_TERM_SLOW)

ZMK_COMBO(combo_wh, &Wh, LT3 LT2, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_gh, &Gh, LT2 LT1, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_ght, &ght, LT3 LT2 LT1, ALPHA_ALL, COMBO_TERM_SLOW)
MAKE_HRM(hm_sh, &kp, &Sh, KEYS_L KEYS_T)
ZMK_COMBO(combo_sh, &hm_sh LC(LALT) 0, LM4 LM3, ALPHA_ALL, COMBO_TERM_SLOW)
MAKE_HRM(hm_sch, &kp, &Sch, KEYS_L KEYS_T)
ZMK_COMBO(combo_sch, &hm_sch LC(LA(LCMD)) 0, LM4 LM3 LM2, ALPHA_ALL, COMBO_TERM_SLOW)
MAKE_HRM(hm_ch, &kp, &Ch, KEYS_L KEYS_T)
ZMK_COMBO(combo_ch, &hm_ch LA(LCMD) 0, LM3 LM2, ALPHA_ALL, COMBO_TERM_FAST)
MAKE_HRM(hm_th, &kp, &Th, KEYS_L KEYS_T)
ZMK_COMBO(combo_th, &hm_th LG(LSHFT) 0, LM2 LM1, ALPHA_ALL, COMBO_TERM_FAST)
MAKE_HRM(hm_tch, &kp, &Tch, KEYS_L KEYS_T)
ZMK_COMBO(combo_tch, &hm_tch LA(LG(LSHFT)) 0, LM3 LM2 LM1, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_ph, &Ph, LB3 LB2, ALPHA, COMBO_TERM_FAST)

// ZMK_COMBO(combo_esc, &kp ESC, LM4 LM1, ALL, COMBO_TERM_SLOW)
// ZMK_COMBO(combo_tab, &kp TAB, LT4 LT3, ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_capsword, &caps_word, LM1 RM1, ALL, COMBO_TERM_SLOW)

ZMK_COMBO(combo_colon, &kp COLON, RT1 RT3, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_excl, &kp EXCL, RT1 RT2, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_qmark, &kp QMARK, RT2 RT3, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_grave, &kp GRAVE, RT3 RT4, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_at, &kp AT, RT0 RT1, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_semi, &kp SEMI, RM0 RM1, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_under, &kp UNDER, RB1 RB3, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_equal, &kp EQUAL, RB2 RB3, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_percent, &kp PRCNT, RB3 RB4, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_tilde, &kp TILDE, RB0 RB4, ALPHA_ALL, COMBO_TERM_SLOW)

#define ZMK_MACRO_FAST(NAME, ...) \
    ZMK_BEHAVIOR(NAME, macro, \
        wait-ms = <0>; \
        tap-ms = <0>; \
        bindings = __VA_ARGS__ ; \
    )
    
ZMK_MACRO_FAST(Wh,
    <&macro_tap &kp W>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Gh,
    <&macro_tap &kp G>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(ght, <&kp G &kp H &kp T>)
ZMK_MACRO_FAST(Sh,
    <&macro_tap &kp S>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Sch,
    <&macro_tap &kp S>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp C &kp H>
)
ZMK_MACRO_FAST(Ch,
    <&macro_tap &kp C>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Th,
    <&macro_tap &kp T>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Tch,
    <&macro_tap &kp T>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp C &kp H>
)
ZMK_MACRO_FAST(Ph,
    <&macro_tap &kp P>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)

/* Mod morphs */

ZMK_BEHAVIOR(CmmaSemi, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&typeSemi>;
)
ZMK_BEHAVIOR(typeSemi, macro,
    bindings = <&macro_release &kp LSHFT>
            , <&macro_tap &kp SEMICOLON>;
)
ZMK_BEHAVIOR(DotColn, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)
ZMK_BEHAVIOR(SlshStar, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp FSLH>, <&kp STAR>;
)
ZMK_BEHAVIOR(HashDllr, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp HASH>, <&kp DLLR>;
)
ZMK_BEHAVIOR(MinusPlus, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp MINUS>, <&kp PLUS>;
)
ZMK_BEHAVIOR(DqtLbkt, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DQT>, <&kp LBKT>;
)
ZMK_BEHAVIOR(SqtRbkt, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp SQT>, <&kp RBKT>;
)

ZMK_BEHAVIOR(qexl, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp QMARK>, <&kp EXCL>;
)

ZMK_BEHAVIOR(dunder, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp MINUS>, <&kp UNDER>;
)

ZMK_BEHAVIOR(bspc_del, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp BSPC>, <&kp DEL>;
)

ZMK_BEHAVIOR(esc_cancel, macro,
    bindings = <&kp ESC &kp K_CANCEL>;
)

/* Adaptive Keys */

ZMK_BEHAVIOR(ak, sticky_key,
    bindings = <&mo>;
    release-after-ms = <AK_TAPPING_TERM>;
    quick-release;
)
// todo: make macro activate layer while held, then hit sticky key on release
#define AK(KEY) ZMK_MACRO_FAST(ak_##KEY, \
    <&macro_tap &kp KEY>, \
    <&macro_press &mo l_ak##KEY>, \
    <&macro_pause_for_release>, \
    <&macro_release &mo l_ak##KEY>, \
    <&ak l_ak##KEY>)

AK(G)
AK(M)
AK(A)
AK(U)
AK(E)
AK(O)

ZMK_MACRO_FAST(ak_lg, <&kp BSPC &kp L &kp G>)

/* Linger Keys */

#define LK(NAME, HOLD, TAP) ZMK_BEHAVIOR(NAME, hold_tap, \
    flavor = "tap-preferred"; \
    tapping-term-ms = <LK_TAPPING_TERM>; \
    bindings = <HOLD>, <TAP>; \
)

ZMK_MACRO_FAST(Qu,
    <&macro_tap &kp Q>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp U>
)
// LK(lk_qu, &kp, &Qu)
// only add the 'u' when rolling onto another key
ZMK_BEHAVIOR(lk_qu, hold_tap,
    flavor = "hold-preferred";
    tapping-term-ms = <500>;
    bindings = <&Qu>, <&kp>;
)

// keymap

ZMK_LAYER(default_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp X      &kp W      &ak_M      &ak_G     &lt NUM J      &HashDllr   &DotColn  &SlshStar   &DqtLbkt   &SqtRbkt
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
&hml LCTRL S &hml LALT C &hml LCMD N &hm_shift_l LSHFT T &kp K &CmmaSemi &hrm_a RSHFT A &hrm_e RCMD E &hmr RALT I &hmr RCTRL H
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp B      &kp P      &kp L      &kp D      &kp V        &MinusPlus   &ak_U      &ak_O      &kp Y      &kp F
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                   &smart_shft &lt EXT R     &lt SYM SPACE &kp ESC 
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(l_akG,
___     ___     &kp L   ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
                        ___     ___    ___     ___
)

ZMK_LAYER(l_akM,
___     ___     ___     &ak_lg  ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
                        ___     ___    ___     ___
)

ZMK_LAYER(l_akA,
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     &kp U
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
                        ___     ___    ___     ___
)

ZMK_LAYER(l_akU,
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     &kp A
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
                        ___     ___    ___     ___
)

ZMK_LAYER(l_akE,
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     &kp O
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
                        ___     ___    ___     ___
)

ZMK_LAYER(l_akO,
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___    ___     ___     ___     ___     &kp E
___     ___     ___     ___     ___    ___     ___     ___     ___     ___
                        ___     ___    ___     ___
)

ZMK_LAYER(num_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    XXX        XXX        XXX        XXX        XXX            &kp EQUAL  &kp N7     &kp N8     &kp N9     XXX  
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LCTRL  &kp LALT   &kp LCMD   &kp LSHFT &sys_reset      &kp STAR   &kp N4     &kp N5     &kp N6     &kp PLUS
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    XXX        XXX        &kp TAB    &kp BSPC   XXX            &kp FSLH   &kp N1     &kp N2     &kp N3     &kp MINUS
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___            ___        &kp N0
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(ext_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    XXX        XXX      &kp LS(TAB)  &swapper  SMART_NUM       &kp PG_UP  &kp HOME   &kp UP     &kp END    XXX 
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LCTRL  &kp LALT   &kp LCMD   &kp LSHFT  XXX            &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &kp DEL
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  XXX            &none      &kp BSPC   &kp TAB    XXX        XXX 
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___          &lt SYM RET &kp K_CANCEL   
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(sym_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp GRAVE   &kp LT     &kp GT    &kp CARET  &none          &kp AMPS   &kp DLLR   &kp LBKT   &kp RBKT  &kp PRCNT
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp EXCL  &kp MINUS   &kp PLUS  &kp EQUAL   &kp HASH       &kp PIPE  &kp COLON   &kp LPAR   &kp RPAR  &kp QMARK
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp BSLH   &kp FSLH   &kp STAR  &kp UNDER   XXX           &kp TILDE   &kp SEMI   &kp LBRC   &kp RBRC   &kp AT
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___            ___        ___   
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)

ZMK_LAYER(fn_layer,
//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    XXX       &kp C_PREV  &kp C_PP  &kp C_NEXT &bootloader    &bootloader &kp F7     &kp F8     &kp F9     &kp F12
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LCTRL  &kp LALT   &kp LCMD   &kp LSHFT &sys_reset     &sys_reset  &kp F4     &kp F5     &kp F6     &kp F11
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
    XXX      &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP XXX          XXX        &kp F1     &kp F2     &kp F3     &kp F10
//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                     ___        ___            ___        ___   
//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
)